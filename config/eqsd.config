# ========================================================================
# Example configuration file for ridehail simulation
# Tom Slee, 2020-06-20
# ========================================================================

[DEFAULT]

# ------------------------------------------------------------------------
# City size (integer, default 10)
# The length of the city grid, in blocks.
# ------------------------------------------------------------------------

city_size = 20

# ------------------------------------------------------------------------
# Driver count (integer, default 1)
# The number of drivers in the simulation. For simulations with 
# equilibration (see below), this is the number of drivers at the 
# beginning of the simulation
# ------------------------------------------------------------------------

driver_count = 30

# ------------------------------------------------------------------------
# Request rate (float, default = 0.2)
# The number of requests each time period (block). If this is non-integer
# then randomization is used to even out the request rate over time
# ------------------------------------------------------------------------

request_rate = 0.2

# ------------------------------------------------------------------------
# Log file (string, default None)
# Log file name. By default, log messages are written to standard output
# only.
# ------------------------------------------------------------------------

log_file = 

# ------------------------------------------------------------------------
# Time periods (integer)
# The number of time periods to run the simulation. Each period corresponds
# to a driver travelling one block
# ------------------------------------------------------------------------

time_periods = 5001

# ------------------------------------------------------------------------
# Verbose (binary, default False)
# If true, log debug messages in addition to information, warning, and 
# error messages
# ------------------------------------------------------------------------

verbose = 

# ------------------------------------------------------------------------
# Quiet (binary, default False)
# If true, only log warning and error messages. 
# TODO: Combine this with verbose as a verbosity level
# ------------------------------------------------------------------------

quiet = 

# ------------------------------------------------------------------------
# Draw
# Select which charts and / or maps to draw. 
# Possible values include 
#   - none (no charts)
#   - map 
#   - stats
#   - equilibration
#   - summary
#   - all
# ------------------------------------------------------------------------

draw = none


# ------------------------------------------------------------------------
# Draw update period (integer, default 1)
# Update charts every N periods
# ------------------------------------------------------------------------

draw_update_period = 5

# ------------------------------------------------------------------------
# Interpolate (integer, default 4)
# For the map display (only) add this many interpolated points between
# time periods so the car movements are smoother
# ------------------------------------------------------------------------

interpolate = 1

# ------------------------------------------------------------------------
# Equilibrate (choice from supply, demand, full; default None)
# Equilibrate the number of drivers (supply), the request rate (demand)
# or full. The details of the parameter choices and equilibration rates
# are given in other parameters
# ------------------------------------------------------------------------

equilibrate = full

# ------------------------------------------------------------------------
# Window (integer, default = 20)
# Rolling window in which to compute rolling averages (wait times, busy
# fraction etc) that are used in graphs and in calculations.
# ------------------------------------------------------------------------

rolling_window = 30

# ------------------------------------------------------------------------
# Results Window (integer, default = 100)
# At the end of the run, compute the final results by averaging over
# this results_window number of periods. Typically bigger than 
# rolling_window
# ------------------------------------------------------------------------

results_window = 200

# ------------------------------------------------------------------------
# Output (string, default None)
# Supply a file name in which to save the animations. If none is supplied,
# any animations are displayed on the screen only.
# ------------------------------------------------------------------------

output = 

# ------------------------------------------------------------------------
# ImageMagick_Dir (string)
# If you choose an MP4 or GIF output (output parameter) then you need 
# ImageMagick installed. This is the directory in which it is installed, 
# for example:
#
#   imagemagick_dir = /Program Files/ImageMagick-7.0.9-Q16" 
# ------------------------------------------------------------------------

imagemagick_dir = /Program Files/ImageMagick-7.0.9-Q16

# ------------------------------------------------------------------------
# Available drivers moving (boolean, default False)
# Set to True if drivers in the "available" state should driver around
# the city. Set to False is they should stay where they are.
# ------------------------------------------------------------------------

available_drivers_moving = False 

# ------------------------------------------------------------------------
# Run sequence (boolean, default False)
# Set to True to run a sequence of simulations with different driver 
# counts and request rates
# ------------------------------------------------------------------------

run_sequence = True

[EQUILIBRATION]
# ------------------------------------------------------------------------
# This section is read only if equilibrate, above, is not None
# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# Price (float, default 1)
# Has effect only if an equilibration method is chosen
# Price is a part of the equilibration path
# ------------------------------------------------------------------------

price = 1.0

# ------------------------------------------------------------------------
# Driver cost (float, default 1)
# Has effect only if an equilibration method is chosen and affects supply.
# The driver utility per block is U = P.B - C_d, where C_d = driver cost
# ------------------------------------------------------------------------

driver_cost = 0.0

# ------------------------------------------------------------------------
# Ride utility (float, default 1)
# Has effect only if an equilibration method is chosen and affects demand.
# The utility per block is U = U_0 - P - W C_w, where C_w = wait cost
# ------------------------------------------------------------------------

ride_utility =  0.7

# ------------------------------------------------------------------------
# Demand slope (float, default 1)
# Has effect only if an equilibration method is chosen and affects demand.
# ------------------------------------------------------------------------

demand_slope = 0.5

# ------------------------------------------------------------------------
# Wait cost (float, default 1)
# Has effect only if an equilibration method is chosen and affects demand.
# The utility per block is U = U_0 - P - W C_w, where C_w = wait cost
# ------------------------------------------------------------------------

wait_cost = 0.0

# ------------------------------------------------------------------------
# Equilibration interval (int)
# Has effect only if an equilibration method is chosen and affects demand.
# The period at which equilibration steps are chosen
# ------------------------------------------------------------------------

equilibration_interval = 50

[SEQUENCE]
# ------------------------------------------------------------------------
# Run a sequence of simulations
# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# Driver cost increment (float)
# Loop over driver costs, starting with driver_cost (above), in 
# increments of driver_cost_increment, with a max of driver_cost_max
# ------------------------------------------------------------------------

driver_cost_increment = 0.1

# ------------------------------------------------------------------------
# Driver cost max (float)
# Loop over driver costs, starting with driver_cost (above), in 
# increments of driver_cost_increment, with a max of driver_cost_max
# ------------------------------------------------------------------------

driver_cost_max = 1.0

# ------------------------------------------------------------------------
# Wait cost increment (float)
# Loop over wait costs, starting with wait_cost (above), in 
# increments of wait_cost_increment, with a max of wait_cost_max
# ------------------------------------------------------------------------

wait_cost_increment = 0.2

# ------------------------------------------------------------------------
# Wait cost max (float)
# Loop over wait costs, starting with wait_cost (above), in 
# increments of wait_cost_increment, with a max of wait_cost_max
# ------------------------------------------------------------------------

wait_cost_max = 1.0

# ------------------------------------------------------------------------
# Request rate repeat (int)
# How many times to repeat each request_rate (to build up statistics)
# ------------------------------------------------------------------------

# request_rate_repeat = 

# ------------------------------------------------------------------------
# Driver count increment (int)
# Loop over driver counts, starting with driver_count (above), in 
# increments of driver_count_increment, with a max of driver_count_max
# ------------------------------------------------------------------------

# driver_count_increment = 

# ------------------------------------------------------------------------
# Driver count max (int)
# Loop over driver counts, starting with driver_count (above), in 
# increments of driver_count_increment, with a max of driver_count_max
# ------------------------------------------------------------------------

# driver_count_max = 

# ------------------------------------------------------------------------
# Request rate increment (float) -- INACTIVE 
# Loop over request rates, starting with request_rate (above), in 
# increments of request_rate_increment, with a max of request_rate_max.
# Only one decimal place is relevant
# ------------------------------------------------------------------------

# request_rate_increment = 

# ------------------------------------------------------------------------
# Request rate max (float) -- INACTIVE 
# Loop over request rates, starting with request_rate (above), in 
# increments of request_rate_increment, with a max of request_rate_max.
# Only one decimal place is relevant
# ------------------------------------------------------------------------

# request_rate_max = 

# ========================================================================
# END
# ========================================================================

