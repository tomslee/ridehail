
[DEFAULT]

# ----------------------------------------------------------------------------
# plot title (str, default None)
# The title is recorded in the output json file
# and is used as the plot title.
# ----------------------------------------------------------------------------

title = Generic village or small town

# ----------------------------------------------------------------------------
# city size, in blocks (even int, default 8, range: 2-200)
# The grid is a square, with this number of blocks on each side.
# A block is often a minute, or a kilometer.
# If use_city_scale is set to True, then this value is divded by 
# minutes_per_block and rounded to an even number
# ----------------------------------------------------------------------------

city_size = 16

# ----------------------------------------------------------------------------
# vehicle count (int, default 4, range: 1-100000)
# The number of vehicles in the simulation. For simulations with 
# equilibration or sequences, this is the number of vehicles at 
#  the beginning of the simulation.
# ----------------------------------------------------------------------------

vehicle_count = 32

# ----------------------------------------------------------------------------
# base demand (float, default 0.2, range: 0.0-10000.0)
# For simulations without equilibration, the demand for trips.
# Alternatively, the request rate (requests per block of time).
# For simulations with equilibration, the request rate is given by 
# 
#       demand = base_demand * price ** (-elasticity)
# ----------------------------------------------------------------------------

base_demand = 1

# ----------------------------------------------------------------------------
# inhomogeneity (float in the range [0.0, 1.0], default 0.0)
# Trips originate in one of two zones: central zone or outer zone.
# The inner zone has sides C/2, and is centred on (C/2, C/2); 
# the outer zone is the remaining 3/4 of the area.
# At 0: the distribution of trip origins is homogenous.
# At 1: all trip origins are inside the central zone.
# ----------------------------------------------------------------------------

inhomogeneity = 0.0

# ----------------------------------------------------------------------------
# inhomogeneous destinationsIf not set, only trip origins are affected by trip_inohomgeneity.
# If set, both origins and destinations are affected.
# If set, mean trip length is also affected.
# ----------------------------------------------------------------------------

inhomogeneous_destinations = False

# ----------------------------------------------------------------------------
# minimum trip distance (int, default 0, range: 0-100)
# A trip must be at least this long.
# ----------------------------------------------------------------------------

min_trip_distance = 0

# ----------------------------------------------------------------------------
# maximum trip distance (int, default None, range: 1-200)
# A trip must be at most this long.
# Must be greater than min_trip_distance and no greater than city_size/2.
# ----------------------------------------------------------------------------

max_trip_distance = 

# ----------------------------------------------------------------------------
# time blocks (int, default 201, range: 0-100000)
# The number of time periods (blocks) to run the simulation.
# Each period corresponds to a vehicle travelling one block.
# ----------------------------------------------------------------------------

time_blocks = 2000

# ----------------------------------------------------------------------------
# idle vehicles moving (bool, default True)
# If True, vehicles in the 'available' state move around
# If False, they stay where they are.
# ----------------------------------------------------------------------------

idle_vehicles_moving = True

# ----------------------------------------------------------------------------
# random number seed (int, default None)
# Random numbers are used throughout the simulation. 
# Set the seed to an integer for reproducible simulations.
# If None, then each simulation will be different.
# ----------------------------------------------------------------------------

random_number_seed = 307

# ----------------------------------------------------------------------------
# results window (int, default 50, range: 1-1000)
# At the end of the run, compute the final results by averaging over
# results_window blocks. Typically bigger than smoothing_window.
# ----------------------------------------------------------------------------

results_window = 50

# ----------------------------------------------------------------------------
# log file (str, default None)
# The file name for logging messages.
# By default, log messages are written to standard output only.
# ----------------------------------------------------------------------------

log_file = 

# ----------------------------------------------------------------------------
# verbosity (int, default 0, choices: [0, 1, 2])
# If 0, log warning, and error messages
# If 1, log info, warning, and error messages
# If 2, log debug, information, warning, and error messages.
# ----------------------------------------------------------------------------

verbosity = 0

# ----------------------------------------------------------------------------
# animate the simulation
# If set, configure the animation in the [ANIMATION] section.
# ----------------------------------------------------------------------------

animate = True

# ----------------------------------------------------------------------------
# equilibrate the supply of vehicles and demand for trips
# If set, configure the equilibration in the [EQUILIBRATION] section.
# ----------------------------------------------------------------------------

equilibrate = False

# ----------------------------------------------------------------------------
# run a sequence of simulations with different vehicle counts or request rates
# If set, configure the sequence in the [SEQUENCE] section.
# ----------------------------------------------------------------------------

run_sequence = False

# ----------------------------------------------------------------------------
# The city size, and driver earnings, are calculated using options
# in the CITY_SCALE section. city_size and max_trip_distance are 
# replaced with a calculated number of blocks
# ----------------------------------------------------------------------------

use_city_scale = False

# ----------------------------------------------------------------------------
# The default dispatch algorithm is to assign the closest vehicle, 
# or if there are multiple closest vehicles, to assign a random 
# vehicle from those closest.
# ----------------------------------------------------------------------------

use_advanced_dispatch = False

[ANIMATION]

# ----------------------------------------------------------------------------
# animation style (Animation, default Animation.TEXT)
# Select which charts and / or maps to display.
# Valid options: all, bar, console, map, none, sequence, stats, stats_bar, terminal_map, terminal_stats, text
# - none (no display)
# - map (desktop map of vehicles and trips)
# - stats (desktop driver phases and wait times)
# - stats_bar (desktop driver phases and wait times as a bar chart)
# - console (rich text-based console with Textual)
# - terminal_map (terminal-based map with Unicode characters and statistics)
# - terminal_stats (terminal-based line charts with plotext)
# - all (displays map + stats)
# - bar (trip distance and wait time histogram)
# - text (plain text output)
# - sequence (desktop display of a sequence of simulations)
# ----------------------------------------------------------------------------

animation_style = none

# ----------------------------------------------------------------------------
# animate update period (int, default 1)
# Update charts every N blocks.
# ----------------------------------------------------------------------------

animate_update_period = 1

# ----------------------------------------------------------------------------
# annotation (str, default None)
# An annotation added to map and stats plots
# ----------------------------------------------------------------------------

annotation = 

# ----------------------------------------------------------------------------
# frame timeout (float, default 1.0s, range: 0.0-10.0s)
# Controls the delay between animation frame updates.
# Higher values slow down animation, useful for small cities with few vehicles.
# ----------------------------------------------------------------------------

animation_delay = 0

# ----------------------------------------------------------------------------
# interpolate (int, default 1)
# For the map display (only) add this many interpolated points between
# time periods so the car movements are smoother.
# ----------------------------------------------------------------------------

interpolate = 4

# ----------------------------------------------------------------------------
# animation output file (str, default None)
# Supply a file name in which to save the animations
# If none is supplied, display animations on the screen only.
# ----------------------------------------------------------------------------

animation_output_file = 

# ----------------------------------------------------------------------------
# ImageMagick directory (str, default None)
# If you choose an MP4 or GIF output (output parameter) then you need 
# ImageMagick. This is the directory in which it is installed,
# for example:
# 
#   imagemagick_dir = /Program Files/ImageMagick-7.0.9-Q16 
# ----------------------------------------------------------------------------

imagemagick_dir = /Program Files/ImageMagick-7.0.10-Q16

# ----------------------------------------------------------------------------
# smoothing window (int, default 20, range: 1-128)
# Rolling window in which to compute trailing averages 
# (wait times, busy fraction etc) used in graphs and in calculations.
# ----------------------------------------------------------------------------

smoothing_window = 50

[EQUILIBRATION]

# ----------------------------------------------------------------------------
# equilibration method (Equilibration converted to enum, default Equilibration.NONE)
# Valid options: supply, price, none, wait_fraction
# Case insensitive, without quotes.
# ----------------------------------------------------------------------------

equilibration = none

# ----------------------------------------------------------------------------
# reservation wage (float, default 0.5, range: 0.0-1.0)
# Vehicle utility per block is U = P.B(1 - F) - C_d, 
# where C_d = reservation wage.
# ----------------------------------------------------------------------------

reservation_wage = 0.5

# ----------------------------------------------------------------------------
# wait_fraction (float, default 0.3, range: 0.0-1.0)
# If equilibration is set to wait_fraction, this is the wait time, as a fraction 
# of the average trip length L, that the system approaches.
# ----------------------------------------------------------------------------

wait_fraction = 0.3

# ----------------------------------------------------------------------------
# price (float, default 1.0, range: 0.0-4.0)
# Price paid by passengers, input to the equilibration process.
# ----------------------------------------------------------------------------

price = 1.0

# ----------------------------------------------------------------------------
# platform commission F (float, default 0.0, range: 0.0-0.5)
# The vehicle utility per block is U = P.B.(1 - F) - C_d, 
# where F = platform commission.
# F > 0 amounts to the platform taking a commission, 
# F < 0 is the platform subsidizing vehicles.
# ----------------------------------------------------------------------------

platform_commission = 0.0

# ----------------------------------------------------------------------------
# demand elasticity (float, default 0.0, range: 0.0-2.0)
# Applicable only when at least one of equilibrate or use_city_scale
# is set.
# The demand (request rate) = R_0 * p ^ (-e), 
# where e is the demand elasticity and R_0 is the base demand
# If left at the default, the demand does not depend on price.
# ----------------------------------------------------------------------------

demand_elasticity = 0.0

# ----------------------------------------------------------------------------
# equilibration interval (int, default 5, range: 1-100)
# The number of blocks at which equilibration steps are chosen.
# ----------------------------------------------------------------------------

equilibration_interval = 1

[SEQUENCE]

# ----------------------------------------------------------------------------
# request rate increment (float, default None)
# The increment in a sequence of request rates
# The starting value is 'base_demand' in the DEFAULT section.
# ----------------------------------------------------------------------------

request_rate_increment = 

# ----------------------------------------------------------------------------
# request rate max (float, default None)
# The maximum value in a sequence of request rates
# The starting value is 'base_demand' in the DEFAULT section.
# ----------------------------------------------------------------------------

request_rate_max = 

# ----------------------------------------------------------------------------
# vehicle count increment (int, default None)
# The increment in a sequence of vehicle counts.
# ----------------------------------------------------------------------------

vehicle_count_increment = 

# ----------------------------------------------------------------------------
# Vehicle Count Max (int, default None)
# The maximum value in a sequence of vehicle counts.
# ----------------------------------------------------------------------------

vehicle_count_max = 

# ----------------------------------------------------------------------------
# inhomogeneity increment (float, default None)
# The increment in a sequence of inhomogeneity values
# The starting value is 'inhomogeneity' in the DEFAULT section.
# ----------------------------------------------------------------------------

inhomogeneity_increment = 

# ----------------------------------------------------------------------------
# inhomogeneity max (float, default None)
# The maximum value in a sequence of inhomogeneity values
# The starting value is 'inhomgeneity' in the DEFAULT section.
# ----------------------------------------------------------------------------

inhomogeneity_max = 

# ----------------------------------------------------------------------------
# commission increment (float, default None)
# The increment in a sequence of platform commissions (usually between 0 and 1)
# The starting value is 'platform_commission' in the EQUILIBRATION section.
# ----------------------------------------------------------------------------

commission_increment = 

# ----------------------------------------------------------------------------
# commission max (float, default None)
# The maximum value in a sequence of platform commissions
# The starting value is 'platform_commission' in the EQUILIBRATION section.
# ----------------------------------------------------------------------------

commission_max = 

[IMPULSES]

# ----------------------------------------------------------------------------
# impulse list (dict, default None)
# Sudden changes during the simulation
# Write as a list of dictionaries. For example...
# impulse_list = [{'block': 480, 'base_demand': 20.0},
#    {'block': 960, 'base_demand': 18.0},
#    {'block': 1080, 'base_demand': 7},
#    ]
# ----------------------------------------------------------------------------

impulse_list = 

[CITY_SCALE]

# ----------------------------------------------------------------------------
# mean vehicle speed in km/h, default 30, range: 1.0-200.0
# Must be specified if use_city_scale is True
# ----------------------------------------------------------------------------

mean_vehicle_speed = 30.0

# ----------------------------------------------------------------------------
# minutes per block (default 1, range: 0.1-60.0)
# Must be specified if use_city_scale is True
# ----------------------------------------------------------------------------

minutes_per_block = 1.0

# ----------------------------------------------------------------------------
# vehicle operations cost, per km
# Operations cost + opportunity cost = total cost
# Total cost overrides reservation_wage, if use_city_scale is True
# ----------------------------------------------------------------------------

per_km_ops_cost = 0.0

# ----------------------------------------------------------------------------
# vehicle opportunity cost, per hour
# If the vehicle does not earn this much, after operating expenses,
# the driver will not take part in ridehailing.
# Operations cost + opportunity cost = total cost
# Total cost overrides reservation_wage, if use_city_scale is True
# ----------------------------------------------------------------------------

per_hour_opportunity_cost = 0.0

# ----------------------------------------------------------------------------
# price per km (default 0, range: 0.0-1.2)
# Per km price + per minute price yields total price per block
# using the mean_vehicle_speed and city_scale to convert
# Total price overrides the 'price' in the EQUILIBRATION section, 
# if equilibrating
# ----------------------------------------------------------------------------

per_km_price = 0.0

# ----------------------------------------------------------------------------
# price per min (default 0, range: 0.0-0.4)
# Per min price + per km price yields total price per block
# using the mean_vehicle_speed and city_scale to convert
# Total price overrides the 'price' in the EQUILIBRATION section, 
# if equilibrating
# ----------------------------------------------------------------------------

per_minute_price = 0.0

[ADVANCED_DISPATCH]

# ----------------------------------------------------------------------------
# dispatch method (DispatchMethod, default DispatchMethod.DEFAULT)
# Select the algorithm that dispatches vehicles to trip requests
# Valid options: default, p1_legacy, forward_dispatch, random
# - default (closest available p1 vehicle)
# - forward_dispatch (closest vehicle including p3 vehicles)
# - p1_legacy (closest available p1 vehicle, using older method)
# - random (random selection of available vehicles)
# ----------------------------------------------------------------------------

dispatch_method = default

# ----------------------------------------------------------------------------
# forward_dispatch_bias (int, default 0)
# Applies only if dispatch_method = forward_dispatch.
# Dispatch an already-engaged vehicle if it is closer to the trip origin
# than (nearest P1 driver distance + forward_dispatch_bias) blocks.
# Must be an integer 0, 1, 2...
# ----------------------------------------------------------------------------

forward_dispatch_bias = 0

[RESULTS]

# ----------------------------------------------------------------------------
# Simulation Results
# Generated: 2025-10-19T10:22:26.575593
# This section is automatically generated and will be overwritten on each run
# Do not manually edit this section
#
# If configuration parameters in this file were overwritten by command-line
# options or interactively, the results will not be reproducible.
# ----------------------------------------------------------------------------

# Simulation metrics
SIM_TIMESTAMP = 2025-10-19T10:22:26.575593
SIM_RIDEHAIL_VERSION = 2025.10.19
SIM_DURATION_SECONDS = 0.73
SIM_BLOCKS_SIMULATED = 2000
SIM_BLOCKS_ANALYZED = 50

# Vehicle metrics (averaged over 'blocks analyzed')
VEHICLE_MEAN_COUNT = 32.000
VEHICLE_FRACTION_P1 = 0.663
VEHICLE_FRACTION_P2 = 0.099
VEHICLE_FRACTION_P3 = 0.237

# Trip metrics (averaged over 'blocks analyzed')
TRIP_MEAN_REQUEST_RATE = 1.000
TRIP_MEAN_RIDE_TIME = 7.939
TRIP_MEAN_WAIT_FRACTION_TOTAL = 0.270
TRIP_FORWARD_DISPATCH_FRACTION = 0.000

# Validation metrics (to measure simulation correctness)
SIM_CHECK_NP2_OVER_RW = 1.082
SIM_CHECK_NP3_OVER_RL = 0.957
SIM_CHECK_P1_P2_P3 = 1.000
SIM_CONVERGENCE_MAX_RMS_RESIDUAL = 0.096

